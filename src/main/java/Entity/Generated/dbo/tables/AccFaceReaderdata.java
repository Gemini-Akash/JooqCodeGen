/*
 * This file is generated by jOOQ.
 */
package Entity.Generated.dbo.tables;


import Entity.Generated.dbo.Dbo;
import Entity.Generated.dbo.tables.records.AccFaceReaderdataRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccFaceReaderdata extends TableImpl<AccFaceReaderdataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DBO.ACC_FACE_READERDATA</code>
     */
    public static final AccFaceReaderdata ACC_FACE_READERDATA = new AccFaceReaderdata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccFaceReaderdataRecord> getRecordType() {
        return AccFaceReaderdataRecord.class;
    }

    /**
     * The column <code>DBO.ACC_FACE_READERDATA.READER</code>.
     */
    public final TableField<AccFaceReaderdataRecord, String> READER = createField(DSL.name("READER"), SQLDataType.VARCHAR(2), this, "");

    /**
     * The column <code>DBO.ACC_FACE_READERDATA.DT</code>.
     */
    public final TableField<AccFaceReaderdataRecord, LocalDateTime> DT = createField(DSL.name("DT"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>DBO.ACC_FACE_READERDATA.CARDID</code>.
     */
    public final TableField<AccFaceReaderdataRecord, String> CARDID = createField(DSL.name("CARDID"), SQLDataType.VARCHAR(8), this, "");

    /**
     * The column <code>DBO.ACC_FACE_READERDATA.REASON</code>.
     */
    public final TableField<AccFaceReaderdataRecord, String> REASON = createField(DSL.name("REASON"), SQLDataType.VARCHAR(2), this, "");

    /**
     * The column <code>DBO.ACC_FACE_READERDATA.NEWCARDID</code>.
     */
    public final TableField<AccFaceReaderdataRecord, String> NEWCARDID = createField(DSL.name("NEWCARDID"), SQLDataType.CHAR(10), this, "");

    /**
     * The column <code>DBO.ACC_FACE_READERDATA.TEMPERATURE</code>.
     */
    public final TableField<AccFaceReaderdataRecord, Double> TEMPERATURE = createField(DSL.name("TEMPERATURE"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>DBO.ACC_FACE_READERDATA.ID</code>.
     */
    public final TableField<AccFaceReaderdataRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DBO.ACC_FACE_READERDATA.DEVICELOGID</code>.
     */
    public final TableField<AccFaceReaderdataRecord, Integer> DEVICELOGID = createField(DSL.name("DEVICELOGID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    private AccFaceReaderdata(Name alias, Table<AccFaceReaderdataRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccFaceReaderdata(Name alias, Table<AccFaceReaderdataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DBO.ACC_FACE_READERDATA</code> table reference
     */
    public AccFaceReaderdata(String alias) {
        this(DSL.name(alias), ACC_FACE_READERDATA);
    }

    /**
     * Create an aliased <code>DBO.ACC_FACE_READERDATA</code> table reference
     */
    public AccFaceReaderdata(Name alias) {
        this(alias, ACC_FACE_READERDATA);
    }

    /**
     * Create a <code>DBO.ACC_FACE_READERDATA</code> table reference
     */
    public AccFaceReaderdata() {
        this(DSL.name("ACC_FACE_READERDATA"), null);
    }

    public <O extends Record> AccFaceReaderdata(Table<O> child, ForeignKey<O, AccFaceReaderdataRecord> key) {
        super(child, key, ACC_FACE_READERDATA);
    }

    @Override
    public Schema getSchema() {
        return Dbo.DBO;
    }

    @Override
    public Identity<AccFaceReaderdataRecord, Integer> getIdentity() {
        return (Identity<AccFaceReaderdataRecord, Integer>) super.getIdentity();
    }

    @Override
    public AccFaceReaderdata as(String alias) {
        return new AccFaceReaderdata(DSL.name(alias), this);
    }

    @Override
    public AccFaceReaderdata as(Name alias) {
        return new AccFaceReaderdata(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccFaceReaderdata rename(String name) {
        return new AccFaceReaderdata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccFaceReaderdata rename(Name name) {
        return new AccFaceReaderdata(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, LocalDateTime, String, String, String, Double, Integer, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
